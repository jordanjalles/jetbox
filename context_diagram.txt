╔════════════════════════════════════════════════════════════════════════════════╗
║                 HIERARCHICAL CONTEXT MANAGEMENT SYSTEM                         ║
║                    For Crash-Resilient Local Agents                            ║
╚════════════════════════════════════════════════════════════════════════════════╝

┌──────────────────────────────────────────────────────────────────────────────┐
│                           HIERARCHICAL STRUCTURE                              │
└──────────────────────────────────────────────────────────────────────────────┘

                                    ┌─────────────┐
                                    │    GOAL     │
                                    │ (Top-level) │
                                    └──────┬──────┘
                                           │
                   ┌───────────────────────┼───────────────────────┐
                   │                       │                       │
              ┌────▼────┐            ┌────▼────┐            ┌────▼────┐
              │  TASK 1 │            │  TASK 2 │            │  TASK 3 │
              │(Create) │            │ (Test)  │            │  (Doc)  │
              └────┬────┘            └────┬────┘            └────┬────┘
                   │                      │                      │
         ┌─────────┼─────────┐           │                      │
         │         │         │           │                      │
    ┌────▼────┐ ┌─▼─────┐ ┌─▼─────┐ ┌──▼──────┐         ┌────▼─────┐
    │Subtask  │ │Subtask│ │Subtask│ │Subtask  │         │ Subtask  │
    │1.1      │ │1.2    │ │1.3    │ │2.1      │         │ 3.1      │
    │(Create) │ │(Add   │ │(Add   │ │(Write   │         │(Write    │
    │__init__ │ │add()) │ │sub()) │ │tests)   │         │README)   │
    └────┬────┘ └───────┘ └───────┘ └─────────┘         └──────────┘
         │
    ┌────┼────┬────┬────┐
    │    │    │    │    │
  ┌─▼┐ ┌─▼┐ ┌─▼┐ ┌─▼┐ ┌─▼┐
  │A1│ │A2│ │A3│ │A4│ │A5│  Actions (tool calls)
  └──┘ └──┘ └──┘ └──┘ └──┘


┌──────────────────────────────────────────────────────────────────────────────┐
│                      CONTEXT FILTERING (NEED-TO-KNOW)                         │
└──────────────────────────────────────────────────────────────────────────────┘

  ╔═══════════════════════════════════════════╗
  ║  LLM RECEIVES (Current Branch Only)       ║
  ╠═══════════════════════════════════════════╣
  ║  GOAL: Create mathx package               ║  ← Level 1
  ║  Status: in_progress                      ║
  ║                                           ║
  ║  CURRENT TASK: Create package structure   ║  ← Level 2
  ║  Status: in_progress                      ║
  ║                                           ║
  ║  ACTIVE SUBTASK: Create __init__.py       ║  ← Level 3
  ║  Status: in_progress                      ║
  ║  Attempt: 1                               ║
  ║                                           ║
  ║  Recent Actions:                          ║  ← Level 4 (last 3 only)
  ║    - write_file → success                 ║
  ║    - run_cmd → error                      ║
  ║    - write_file → success                 ║
  ║                                           ║
  ║  NEXT: Add add() function                 ║
  ║                                           ║
  ║  STATE: pkg_exists:✓ tests_exist:✗        ║
  ╚═══════════════════════════════════════════╝
           ▲
           │ ~600-2000 chars (vs 8K-12K old way)
           │

  ╔═══════════════════════════════════════════╗
  ║  FILTERED OUT (Not shown to LLM)          ║
  ╠═══════════════════════════════════════════╣
  ║  ✗ Task 2 (not active yet)                ║
  ║  ✗ Task 3 (future)                        ║
  ║  ✗ Subtask 1.2 (not active yet)           ║
  ║  ✗ Old actions from subtask 1.1 (>3 ago)  ║
  ║  ✗ Completed tasks (unless needed)        ║
  ╚═══════════════════════════════════════════╝


┌──────────────────────────────────────────────────────────────────────────────┐
│                         LOOP DETECTION (3 TYPES)                              │
└──────────────────────────────────────────────────────────────────────────────┘

TYPE A: Simple Repetition
━━━━━━━━━━━━━━━━━━━━━━━
  action_X()  ──→  attempt 1  ✓
  action_X()  ──→  attempt 2  ✓
  action_X()  ──→  attempt 3  ✓
  action_X()  ──→  🚫 BLOCKED (repeated 3+ times)


TYPE B: Alternating Pattern
━━━━━━━━━━━━━━━━━━━━━━━━━━
  action_A()  ──→  ✓
  action_B()  ──→  ✓
  action_A()  ──→  ✓ (same as #1)
  action_B()  ──→  🚫 BLOCKED (A-B-A-B pattern detected)


TYPE C: Escalating Failures
━━━━━━━━━━━━━━━━━━━━━━━━━━━
  Subtask: Fix test
    ├─ Attempt 1: FAIL
    ├─ Attempt 2: FAIL
    └─ 🚫 BLOCKED → Escalate to Task level
                   Task: Add tests → BLOCKED
                   → Must try different approach


┌──────────────────────────────────────────────────────────────────────────────┐
│                          CRASH RECOVERY FLOW                                  │
└──────────────────────────────────────────────────────────────────────────────┘

  SESSION 1                         CRASH!                    SESSION 2
  ═════════                         ══════                    ═════════

  Goal: Create mathx                                          Load state.json
    ├─ Task 1: Create pkg                                        ↓
    │   ├─ Subtask 1.1 [✓]                                    Reconstruct:
    │   ├─ Subtask 1.2 [→]  ← Working on this                 Goal
    │   │   ├─ Action: write_file ✓                            ├─ Task 1
    │   │   └─ Action: run_cmd ✗                               │   ├─ Subtask 1.1 ✓
    │   └─ Subtask 1.3 [ ]                                     │   ├─ Subtask 1.2 [→] ← Resume here!
    └─ Task 2: Add tests                                       │   │   ├─ Action 1 ✓
        └─ ...                                                 │   │   └─ Action 2 ✗
                                                               │   └─ Subtask 1.3
    Save to:                                                   └─ Task 2
    .agent_context/
      └─ state.json ────────────────────────────────────────→  Resume exactly
                          Persist every step                   where we crashed!


┌──────────────────────────────────────────────────────────────────────────────┐
│                       STATE PERSISTENCE FILES                                 │
└──────────────────────────────────────────────────────────────────────────────┘

  .agent_context/
  │
  ├─ state.json              ← Primary state (hierarchical tree)
  │  {
  │    "goal": {...},
  │    "tasks": [...],
  │    "current_task_idx": 0,
  │    "current_subtask_idx": 1,
  │    "loop_counts": {...},
  │    "blocked_actions": [...],
  │    "last_probe_state": {...}
  │  }
  │
  ├─ history.jsonl           ← Action log (append-only)
  │  {"name": "write_file", "args": {...}, "result": "success", ...}
  │  {"name": "run_cmd", "args": {...}, "result": "error", ...}
  │  {"name": "write_file", "args": {...}, "result": "success", ...}
  │
  └─ loops.json              ← Detected loops
     [
       {
         "timestamp": "2025-10-19T...",
         "action_signature": "run_cmd::...",
         "attempt_count": 3
       }
     ]


┌──────────────────────────────────────────────────────────────────────────────┐
│                          BENEFITS COMPARISON                                  │
└──────────────────────────────────────────────────────────────────────────────┘

  ┌─────────────────────┬──────────────────┬──────────────────┬─────────────┐
  │      Metric         │   OLD APPROACH   │   NEW APPROACH   │ IMPROVEMENT │
  ├─────────────────────┼──────────────────┼──────────────────┼─────────────┤
  │ Context size        │  8K-12K chars    │  600-2K chars    │   -92%      │
  │ Token usage/round   │  ~3K tokens      │  ~400 tokens     │   -87%      │
  │ Loop detection      │  Counter (>3)    │  3 pattern types │   Better    │
  │ Crash recovery      │  Parse logs      │  Load JSON       │   Instant   │
  │ Context relevance   │  All recent      │  Current branch  │   Focused   │
  │ Structure           │  Flat list       │  Hierarchical    │   Clear     │
  │ Progress tracking   │  Status string   │  Tree with %     │   Visual    │
  └─────────────────────┴──────────────────┴──────────────────┴─────────────┘


┌──────────────────────────────────────────────────────────────────────────────┐
│                             API QUICK START                                   │
└──────────────────────────────────────────────────────────────────────────────┘

  from context_manager import ContextManager, Task, Subtask

  # 1. Initialize
  ctx = ContextManager()
  ctx.load_or_init("Create mathx package")

  # 2. Structure tasks
  task = Task(description="Create package")
  task.subtasks = [
      Subtask(description="Create __init__.py"),
      Subtask(description="Add add() function"),
  ]
  ctx.state.goal.tasks.append(task)

  # 3. Record actions (with loop detection)
  allowed = ctx.record_action(
      name="write_file",
      args={"path": "mathx/__init__.py", "content": "..."},
      result="success"
  )

  if not allowed:
      print("🚫 Loop detected - try different approach")

  # 4. Get compact context
  context = ctx.get_compact_context(max_chars=2000)

  # 5. Send to LLM
  response = llm_call(system_prompt, context, tools)

  # 6. Mark progress
  ctx.mark_subtask_complete(success=True)
  ctx.advance_to_next_subtask()


┌──────────────────────────────────────────────────────────────────────────────┐
│                          INTEGRATION CHECKLIST                                │
└──────────────────────────────────────────────────────────────────────────────┘

  Phase 1: Parallel Tracking
  ☐ Add ContextManager alongside existing code
  ☐ Track both old and new contexts
  ☐ Compare outputs

  Phase 2: Loop Detection
  ☐ Replace SEEN dict with ctx.record_action()
  ☐ Keep old approach as fallback
  ☐ Verify loops are detected

  Phase 3: Context Generation
  ☐ Use ctx.get_compact_context() instead of message history
  ☐ Compare token usage
  ☐ Verify LLM responses are still good

  Phase 4: Task Decomposition
  ☐ Add goal → tasks → subtasks breakdown
  ☐ Use LLM or heuristics
  ☐ Populate hierarchy at start

  Phase 5: Full Migration
  ☐ Remove old message history
  ☐ Use hierarchical context exclusively
  ☐ Test crash recovery
  ☐ Monitor loop detection


╔════════════════════════════════════════════════════════════════════════════════╗
║  RESULT: 92% smaller context, 87% fewer tokens, robust loop detection,        ║
║          instant crash recovery, need-to-know filtering                        ║
╚════════════════════════════════════════════════════════════════════════════════╝
