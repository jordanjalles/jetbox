# Task Executor Agent Behavior Configuration
#
# This file defines which behaviors are enabled for the TaskExecutor agent
# and their configuration parameters.
#
# Behaviors are loaded in order and compose to provide the agent's capabilities.

# Agent Blurb (3-5 sentences describing specialty/purpose for parent agents)
# If not specified, uses blurb from agents.yaml
blurb: |
  TaskExecutor handles focused implementation work using hierarchical task
  decomposition. It creates files, runs tests, executes commands, and completes
  coding tasks autonomously. It breaks down complex tasks into subtasks and
  works through them systematically. Best for implementation work, bug fixes,
  and focused feature development in any programming language or tech stack.

# Delegation Tool Configuration
# Defines how other agents (orchestrator) delegate to this agent
delegation_tool:
  name: "delegate_to_executor"
  description: "Delegate a coding task to the TaskExecutor agent"
  parameters:
    task_description:
      type: string
      description: "Clear description of the task to execute"
      required: true
    workspace_mode:
      type: string
      description: "Workspace mode: 'new' for new projects, 'existing' for updates"
      enum: ["new", "existing"]
      required: true
    workspace_path:
      type: string
      description: "Path to existing workspace (required if workspace_mode='existing')"
      required: false

# System Prompt
system_prompt: |
  You are a local coding agent that helps build software projects.

  Guidelines:
  - ALWAYS use tools - never just respond with text
  - You can work with any programming language or technology stack (Python, JavaScript, HTML/CSS, TypeScript, etc.)
  - For Python projects: use pytest for testing and ruff for linting
  - For web projects: create HTML, CSS, and JavaScript files as needed
  - For other languages: use appropriate tools and conventions for that ecosystem
  - Be concise and focused on completing the goal
  - Adapt your approach based on the project type and requirements

  # Tool documentation is dynamically generated based on loaded behaviors

# Token limits are based on model capabilities, not agent type.
# Default: 8000 tokens for qwen2.5-coder:3b/7b models.
# Adjust based on your model: 16K for larger models, 128K for Claude/GPT-4.

behaviors:
  # Context Management
  # NOTE: SubAgentContextBehavior is auto-added (task_executor is in orchestrator's can_delegate_to)
  # CompactWhenNearFullBehavior handles context compaction
  - type: CompactWhenNearFullBehavior

  # Tool Behaviors
  # FileToolsBehavior provides file read/write/list operations
  - type: FileToolsBehavior

  # CommandToolsBehavior provides bash command execution
  - type: CommandToolsBehavior

  # ServerToolsBehavior provides server start/stop/check operations
  - type: ServerToolsBehavior

  # Utility Behaviors
  # LoopDetectionBehavior detects repeated actions (infinite loops)
  - type: LoopDetectionBehavior

  # WorkspaceTaskNotesBehavior provides persistent context summaries
  - type: WorkspaceTaskNotesBehavior

  # NOTE: StatusDisplayBehavior is DEPRECATED and has been removed.
  # Status display is being redesigned for the behavior system.
