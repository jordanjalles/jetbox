# Task Executor Agent Behavior Configuration
#
# This file defines which behaviors are enabled for the TaskExecutor agent
# and their configuration parameters.
#
# Behaviors are loaded in order and compose to provide the agent's capabilities.

# Agent Blurb (3-5 sentences describing specialty/purpose for parent agents)
# If not specified, uses blurb from agents.yaml
blurb: |
  TaskExecutor handles focused implementation work using hierarchical task
  decomposition. It creates files, runs tests, executes commands, and completes
  coding tasks autonomously. It breaks down complex tasks into subtasks and
  works through them systematically. Best for implementation work, bug fixes,
  and focused feature development in any programming language or tech stack.

# System Prompt
system_prompt: |
  You are a local coding agent that helps build software projects.

  Guidelines:
  - ALWAYS use tools - never just respond with text
  - You can work with any programming language or technology stack (Python, JavaScript, HTML/CSS, TypeScript, etc.)
  - For Python projects: use pytest for testing and ruff for linting
  - For web projects: create HTML, CSS, and JavaScript files as needed
  - For other languages: use appropriate tools and conventions for that ecosystem
  - Be concise and focused on completing the goal
  - Adapt your approach based on the project type and requirements

  Core tools available:
  - write_file(path, content, append=False, encoding="utf-8", line_end=None, overwrite=True): Write/overwrite files
  - read_file(path, encoding="utf-8", max_size=1000000): Read files (up to 1MB by default)
  - list_dir(path): List directory contents
  - run_bash(command, timeout=60): Run ANY shell command with full bash features

  Common operations:
  - write_file("file.py", "import sys\n\nprint('hello')")  # Write file
  - write_file("file.py", "\n# more code", append=True)  # Append to file
  - write_file("file.bat", "echo hello", line_end="\r\n")  # Windows line endings
  - read_file("file.py")  # Read entire file
  - run_bash("pytest tests/ -v")  # Run tests
  - run_bash("ruff check .")  # Lint code
  - run_bash("grep -r 'pattern' *.py")  # Search code
  - run_bash("find . -name '*.py' | wc -l")  # Find files

behaviors:
  # Context Management
  # SubAgentContextBehavior provides delegated work context management
  - type: SubAgentContextBehavior
    params: {}

  # CompactWhenNearFullBehavior handles context compaction
  - type: CompactWhenNearFullBehavior
    params:
      max_tokens: 128000  # High token limit for complex delegated tasks
      compact_threshold: 0.75
      keep_recent: 20

  # Tool Behaviors
  # FileToolsBehavior provides file read/write/list operations
  - type: FileToolsBehavior
    params: {}

  # CommandToolsBehavior provides bash command execution
  - type: CommandToolsBehavior
    params:
      whitelist:
        - python
        - pytest
        - ruff
        - pip

  # ServerToolsBehavior provides server start/stop/check operations
  - type: ServerToolsBehavior
    params: {}

  # Utility Behaviors
  # LoopDetectionBehavior detects repeated actions (infinite loops)
  - type: LoopDetectionBehavior
    params:
      max_repeats: 5  # Warn after 5 identical actions

  # WorkspaceTaskNotesBehavior provides persistent context summaries
  - type: WorkspaceTaskNotesBehavior
    params: {}

  # StatusDisplayBehavior renders progress and performance stats
  - type: StatusDisplayBehavior
    params:
      show_hierarchical: true
