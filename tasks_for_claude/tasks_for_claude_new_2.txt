add these tasks to your own claude task management, noting when I will want you to continue and where I will want you to wait for my direction before continuing.
1. Add jetprojects to gitignore. that's where im testing the agent manually CONTINUE
2. Make the coding agent system prompt more generic so it can code in more languages like to make websites as well as AI python coding and whatever else it might need. CONTINUE
3. I want the coding agent task visualization to be improved: a. create an ASCII visualization of the max context the agent can hold, and color-coded breakdown of how tokens are being used like sys prompt, task descriptions, agent outputs, and files read into context. b. I want to always see the goal, task, and subtask that the agent is currently within listed out with indentation and elbow ASCII connectors. c. live agent status e.g. thinking, specific tool called, decomposing, etc... 
STOP - i want to see the visualization in action and give feedback 
4. The current agent is just a coding task executor. I want to make a new separate agent called orchestrator. It should take the role of interfacing with the user via text, clarifying user requirements and intent, and managing the task executor.  Agents should be an abstract class such that the necessary differences between the orchestrator and task executor setup logic should be easily modifyable to create new flavors of agent going forward. Likewise, the graph of agent relationships should be easily understood and controlled through simple configs. Everything should be simple and clear enough that the agents themselves should be able to create new types of agents easily in the future, with varying roles and logic. Think carefully and make a plan for me that is well thought out and easy to understand. STOP milestone 1
5. Play the role of a user and test using the orchestrator via the command line directly as a conversational interface for software engineering. Tell it to build a couple L1-L3 projects sequentially. Note issues and propose solutions before iterating. STOP
6. Using task delegation. Have the orchestrator agent build a live web interface for interacting with the agent itself using lightweight native html, css, and javascript. Do not fix issues with the live web interface yourself. If the orchestrator fails, just analyse why the agent may have failed and summarize clearly. STOP  milestone 2
7. Look into coding benchmarks for AI and how to participate.
8. Think about how to implement an error correction process along the lines of maintaining a backlog of failures until the failures count reaches 100, then reflecting back over them in analysis to identify the most common ones. Then, diagnosing deeply the cause of the top failure category. Then proposing a solution to upgrade the system that will prevent this type of error from happening again categorically in a generic and efficient way.