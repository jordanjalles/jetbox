# Agent Configuration
# Defines available agents and their delegation relationships

agents:
  # Orchestrator: User-facing agent that plans and delegates
  orchestrator:
    class: OrchestratorAgent
    description: "Manages user conversation and delegates coding tasks"
    blurb: |
      Orchestrator manages user conversations and coordinates work delegation.
      It assesses task complexity, clarifies requirements, and delegates to
      appropriate specialist agents (Architect for design, TaskExecutor for
      implementation). Best for project planning, task breakdown, and managing
      multi-step workflows requiring coordination between different agents.
    can_delegate_to:
      - architect       # Can consult architect for complex projects
      - task_executor

  # Architect: Architecture design consultant
  architect:
    class: ArchitectAgent
    description: "Software architecture consultant for complex project design"
    blurb: |
      Architect specializes in software architecture design for complex projects.
      It creates architecture documents, module specifications, and task breakdowns.
      It asks clarifying questions about requirements and constraints, proposes
      architecture patterns, and justifies design trade-offs. Best for multi-component
      systems, service architecture, and projects requiring clear technical design.
    can_delegate_to: []  # Consultant agent (doesn't delegate)
    delegation_tool:
      name: "consult_architect"
      description: "Consult the Architect agent for complex project architecture design"
      parameters:
        project_description:
          type: string
          description: "Brief description of the project"
          required: true
        requirements:
          type: string
          description: "Functional and non-functional requirements"
          required: true
        constraints:
          type: string
          description: "Technical constraints (team size, tech stack, timeline, etc.)"
          required: true

  # TaskExecutor: Coding agent that executes specific tasks
  task_executor:
    class: TaskExecutorAgent
    description: "Executes coding tasks with hierarchical decomposition"
    blurb: |
      TaskExecutor handles focused implementation work using hierarchical task
      decomposition. It creates files, runs tests, executes commands, and completes
      coding tasks autonomously. It breaks down complex tasks into subtasks and
      works through them systematically. Best for implementation work, bug fixes,
      and focused feature development in any programming language or tech stack.
    can_delegate_to: []  # Executor doesn't delegate (terminal agent)
    delegation_tool:
      name: "delegate_to_executor"
      description: "Delegate a coding task to the TaskExecutor agent"
      parameters:
        task_description:
          type: string
          description: "Clear description of the task to execute"
          required: true
        workspace_mode:
          type: string
          description: "Workspace mode: 'new' for new projects, 'existing' for updates"
          enum: ["new", "existing"]
          required: true
        workspace_path:
          type: string
          description: "Path to existing workspace (required if workspace_mode='existing')"
          required: false
